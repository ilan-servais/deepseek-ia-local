async function testRegeneration() {
  try {
    console.log('Lancement de la r√©g√©n√©ration des embeddings...');
    
    // V√©rifier d'abord la connexion √† la base de donn√©es
    try {
      const checkResponse = await fetch('http://localhost:3000/api/database/check-connection');
      const checkData = await checkResponse.json();
      
      if (!checkData.success) {
        console.error('‚ùå Probl√®me de connexion √† la base de donn√©es:', checkData.error || 'Erreur inconnue');
        return;
      }
      console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');
    } catch (error) {
      console.warn('‚ö†Ô∏è Impossible de v√©rifier l\'√©tat de la base de donn√©es');
    }
    
    // Utiliser l'endpoint de r√©g√©n√©ration des embeddings manquants qui fonctionne d√©j√†
    const response = await fetch('http://localhost:3000/api/regenerate-embeddings');
    const data = await response.json();
    
    console.log('R√©sultat:', data);
    
    if (data.success) {
      console.log(`‚úÖ V√©rification des embeddings r√©ussie`);
      console.log(`${data.processedChunks || 0} chunks trait√©s`);
      console.log(`${data.generatedEmbeddings || 0} embeddings g√©n√©r√©s`);
    } else if (data.error) {
      console.error(`‚ùå Erreur: ${data.error}`);
      console.log('üí° Conseil: V√©rifiez l\'√©tat de la base de donn√©es via /diagnostics');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la connexion √† l\'API:', error);
    console.log('üí° Assurez-vous que le serveur Next.js est bien lanc√© sur le port 3000');
  }
}

async function testDiagnostics() {
  try {
    console.log('üîç Diagnostic du syst√®me RAG...');
    
    const response = await fetch('http://localhost:3000/api/diagnostics');
    const data = await response.json();
    
    console.log('\nüìä √âtat du syst√®me:');
    console.log(`Base de donn√©es: ${data.database.connected ? '‚úÖ Connect√©e' : '‚ùå D√©connect√©e'}`);
    console.log(`Ollama: ${data.ollama.status === 'online' ? '‚úÖ En ligne' : '‚ùå Hors ligne'}`);
    console.log(`Mod√®le deepseek-r1:1.5b: ${data.ollama.models.some(m => m.name.includes('deepseek')) ? '‚úÖ Install√©' : '‚ùå Non install√©'}`);
    
    console.log('\nüìÑ Documents index√©s:');
    if (data.documents && data.documents.length > 0) {
      data.documents.forEach(doc => {
        console.log(`- ${doc.filename}: ${doc.chunk_count} chunks, ${doc.embedding_count} embeddings`);
      });
    } else {
      console.log('Aucun document trouv√© dans la base de donn√©es.');
    }
    
    return data;
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
    console.log('üí° Assurez-vous que le serveur Next.js est bien lanc√© sur le port 3000');
  }
}

async function testSearch(query, exact = false) {
  try {
    console.log(`üîç ${exact ? 'Recherche exacte' : 'Recherche s√©mantique'} pour: "${query}"...`);
    
    // V√©rifier que le terme de recherche n'est pas vide
    if (!query || query.trim() === '') {
      console.error('‚ùå Erreur: Le terme de recherche ne peut pas √™tre vide');
      return;
    }
    
    // Corriger le format de la requ√™te selon ce qui est attendu par l'API
    const requestBody = {
      searchTerm: query, // Utiliser searchTerm au lieu de query
      exact: exact
    };
    
    const response = await fetch('http://localhost:3000/api/documents/search', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Erreur HTTP ${response.status}: ${response.statusText}`);
      try {
        // Tenter de parser l'erreur JSON
        const errorJson = JSON.parse(errorText);
        console.error(`Message d'erreur: ${errorJson.error || 'Inconnu'}`);
      } catch {
        console.error(`R√©ponse d'erreur: ${errorText.substring(0, 200)}${errorText.length > 200 ? '...' : ''}`);
      }
      
      // Si c'est une erreur 400, c'est probablement li√© √† la requ√™te
      if (response.status === 400) {
        console.log('\nüí° Suggestions:');
        console.log('- V√©rifiez que le terme de recherche n\'est pas vide');
        console.log('- Essayez d\'utiliser un terme plus sp√©cifique');
        console.log('- Consultez les logs du serveur pour plus de d√©tails');
      }
      return;
    }
    
    const data = await response.json();
    
    console.log('\nüìä R√©sultats de recherche:');
    if (data.results && data.results.length > 0) {
      data.results.forEach((doc, index) => {
        console.log(`\n${index + 1}. Document: ${doc.filename} (Pertinence: ${(doc.similarity * 100).toFixed(2)}%)`);
        console.log(`   Extrait: ${doc.content.substring(0, 150)}...`);
        
        if (doc.content.includes('http') || doc.content.includes('www')) {
          // Extraire les URLs potentielles
          const urlMatch = doc.content.match(/\[([^\]]+)\]\(([^)]+)\)/);
          if (urlMatch) {
            console.log(`   üîó URL trouv√©e: ${urlMatch[2]} (${urlMatch[1]})`);
          } else {
            const simpleUrlMatch = doc.content.match(/(https?:\/\/[^\s]+)/);
            if (simpleUrlMatch) {
              console.log(`   üîó URL trouv√©e: ${simpleUrlMatch[1]}`);
            }
          }
        }
      });
    } else {
      console.log('Aucun r√©sultat trouv√©.');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la recherche:', error);
  }
}

// Fonction principale
async function main() {
  // D√©terminer l'action √† partir des arguments de ligne de commande
  const args = process.argv.slice(2);
  const action = args[0] || 'regenerate';
  
  if (action === 'search' && args[1]) {
    const exactSearch = args.includes('--exact');
    await testSearch(args[1], exactSearch);
  } else if (action === 'search') {
    console.log('‚ùå Veuillez fournir un terme de recherche.');
    console.log('Usage: node scripts/testRegeneration.js search "terme" [--exact]');
    console.log('  --exact  Active la recherche par nom de fichier au lieu de la recherche s√©mantique');
  } else if (action === 'diagnose') {
    await testDiagnostics();
  } else if (action === 'help' || action === '--help' || action === '-h') {
    console.log('\nüìö Aide - Utilitaire de test RAG');
    console.log('---------------------------------');
    console.log('Commandes disponibles:');
    console.log('  diagnose       Affiche l\'√©tat du syst√®me (base de donn√©es, Ollama, documents)');
    console.log('  search "terme" Effectue une recherche s√©mantique');
    console.log('    Options:');
    console.log('      --exact    Recherche exacte par nom de fichier');
    console.log('  regenerate     V√©rifie et r√©g√©n√®re les embeddings manquants');
    console.log('  help          Affiche cette aide');
    console.log('\nExemples:');
    console.log('  node scripts/testRegeneration.js diagnose');
    console.log('  node scripts/testRegeneration.js search "d√©veloppeur web" --exact');
  } else {
    await testRegeneration();
  }
}

// Ex√©cuter le script
main();
