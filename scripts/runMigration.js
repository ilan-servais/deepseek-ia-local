const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');

// Charger les variables d'environnement depuis .env.local
dotenv.config({ path: path.join(__dirname, '..', '.env.local') });

// Configuration de la connexion √† la base de donn√©es avec les valeurs de docker-compose
const pool = new Pool({
  user: process.env.POSTGRES_USER || 'postgres',
  host: process.env.POSTGRES_HOST || 'localhost',
  database: process.env.POSTGRES_DB || 'postgres',
  password: process.env.POSTGRES_PASSWORD || 'postgres',
  port: parseInt(process.env.POSTGRES_PORT || '5432'),
});

// Fonction pour ex√©cuter une commande SQL individuelle
async function executeSqlCommand(client, command) {
  if (!command.trim()) return;
  
  try {
    console.log(`Ex√©cution: ${command.slice(0, 50)}${command.length > 50 ? '...' : ''}`);
    await client.query(command);
    console.log("‚úì Commande ex√©cut√©e avec succ√®s");
  } catch (err) {
    console.error(`Erreur lors de l'ex√©cution de la commande: ${err.message}`);
    throw err;
  }
}

async function runMigration() {
  const client = await pool.connect();
  try {
    // Lire le contenu du fichier SQL
    const migrationPath = path.join(__dirname, '..', 'migrations', '002-enhanced-document-metadata.sql');
    const sqlContent = fs.readFileSync(migrationPath, 'utf8');
    
    console.log('Ex√©cution de la migration pour enrichir les m√©tadonn√©es...');
    
    // Diviser le script SQL en commandes individuelles
    // Les commandes sont s√©par√©es par des points-virgules
    const commands = sqlContent
      .split(';')
      .filter(cmd => cmd.trim() !== '')
      .map(cmd => cmd.trim() + ';');
    
    // Ex√©cuter chaque commande s√©par√©ment
    for (const command of commands) {
      // Ignorer les commentaires
      if (command.trim().startsWith('--')) continue;
      
      await executeSqlCommand(client, command);
    }
    
    console.log('Migration termin√©e avec succ√®s!');
    
    // Ajouter un rapport apr√®s la migration r√©ussie
    console.log('\n‚úÖ Migration r√©ussie ! Voici ce qui a √©t√© fait :');
    console.log('1. Ajout des colonnes de m√©tadonn√©es √† la table documents (title, author, date, category, source_url)');
    console.log('2. Mise √† jour des documents existants avec des valeurs par d√©faut');
    console.log('3. Cr√©ation d\'index pour optimiser les recherches par date, cat√©gorie et auteur');
    
    // V√©rifier le nombre de documents qui ont √©t√© mis √† jour
    const docsCount = await client.query(`SELECT COUNT(*) FROM documents`);
    console.log(`\nüìä Statistiques : ${docsCount.rows[0].count} documents ont √©t√© enrichis avec des m√©tadonn√©es.`);
    
    console.log('\nüöÄ Prochaines √©tapes :');
    console.log('1. Red√©marrer le serveur Next.js (npm run dev)');
    console.log('2. Tester l\'upload d\'un nouveau document avec m√©tadonn√©es');
    console.log('3. V√©rifier que les chunks sont cr√©√©s avec la m√©thode de chunking s√©mantique');
    console.log('4. Tester la recherche pour voir si les r√©sultats sont plus pertinents');
    
  } catch (error) {
    console.error('Erreur lors de l\'ex√©cution de la migration:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

runMigration();
